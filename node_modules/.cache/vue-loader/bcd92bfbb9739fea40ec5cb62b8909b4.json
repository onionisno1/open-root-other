{"remainingRequest":"E:\\yhc\\other\\open-root-other\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\yhc\\other\\open-root-other\\node_modules\\vue-awesome\\components\\Icon.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"E:\\yhc\\other\\open-root-other\\node_modules\\vue-awesome\\components\\Icon.vue","mtime":1610444893900},{"path":"E:\\yhc\\other\\open-root-other\\node_modules\\css-loader\\dist\\cjs.js","mtime":1610444882996},{"path":"E:\\yhc\\other\\open-root-other\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1610444894607},{"path":"E:\\yhc\\other\\open-root-other\\node_modules\\postcss-loader\\src\\index.js","mtime":1610444888927},{"path":"E:\\yhc\\other\\open-root-other\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1610444880938},{"path":"E:\\yhc\\other\\open-root-other\\node_modules\\vue-loader\\lib\\index.js","mtime":1610444894606}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLmZhLWljb24gew0KICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7DQogIGZpbGw6IGN1cnJlbnRDb2xvcjsNCiAgb3ZlcmZsb3c6IHZpc2libGU7DQp9DQoNCi5mYS1pY29uID4gZyB7DQogIHRyYW5zZm9ybS1vcmlnaW46IDUwJSA1MCU7DQp9DQoNCi5mYS1mbGlwLWhvcml6b250YWwgew0KICB0cmFuc2Zvcm06IHNjYWxlKC0xLCAxKTsNCn0NCg0KLmZhLWZsaXAtdmVydGljYWwgew0KICB0cmFuc2Zvcm06IHNjYWxlKDEsIC0xKTsNCn0NCg0KLmZhLWZsaXAtYm90aCB7DQogIHRyYW5zZm9ybTogc2NhbGUoLTEsIC0xKTsNCn0NCg0KLmZhLXNwaW4gPiBnIHsNCiAgYW5pbWF0aW9uOiBmYS1zcGluIDFzIDBzIGluZmluaXRlIGxpbmVhcjsNCn0NCg0KLmZhLXB1bHNlID4gZyB7DQogIGFuaW1hdGlvbjogZmEtc3BpbiAxcyBpbmZpbml0ZSBzdGVwcyg4KTsNCn0NCg0KLmZhLWludmVyc2Ugew0KICBjb2xvcjogI2ZmZjsNCn0NCg0KQGtleWZyYW1lcyBmYS1zcGluIHsNCiAgMCUgew0KICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpOw0KICB9DQogIDEwMCUgew0KICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7DQogIH0NCn0NCg=="},{"version":3,"sources":["Icon.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmUA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Icon.vue","sourceRoot":"node_modules/vue-awesome/components","sourcesContent":["<script>\r\nimport nanoid from 'nanoid/non-secure'\r\n\r\nlet icons = {}\r\n\r\nfunction warn (msg, vm) {\r\n  if (!vm) {\r\n    console.error(msg)\r\n    return\r\n  }\r\n  vm.constructor.super.util.warn(msg, vm)\r\n}\r\n\r\nexport default {\r\n  name: 'fa-icon',\r\n  props: {\r\n    name: {\r\n      type: String,\r\n      validator (val) {\r\n        if (val && !(val in icons)) {\r\n          warn(\r\n            `Invalid prop: prop \"name\" is referring to an unregistered icon \"${val}\".\\n` +\r\n              `Please make sure you have imported this icon before using it.`,\r\n            this\r\n          )\r\n          return false\r\n        }\r\n        return true\r\n      }\r\n    },\r\n    title: String,\r\n    scale: [Number, String],\r\n    spin: Boolean,\r\n    inverse: Boolean,\r\n    pulse: Boolean,\r\n    flip: {\r\n      validator (val) {\r\n        return val === 'horizontal' || val === 'vertical' || val === 'both'\r\n      }\r\n    },\r\n    label: String,\r\n    tabindex: [Number, String]\r\n  },\r\n  data () {\r\n    return {\r\n      id: getId('va-'),\r\n      x: false,\r\n      y: false,\r\n      childrenWidth: 0,\r\n      childrenHeight: 0,\r\n      outerScale: 1\r\n    }\r\n  },\r\n  computed: {\r\n    normalizedScale () {\r\n      let scale = this.scale\r\n      scale = typeof scale === 'undefined' ? 1 : Number(scale)\r\n      if (isNaN(scale) || scale <= 0) {\r\n        warn(\r\n          `Invalid prop: prop \"scale\" should be a number over 0.`,\r\n          this\r\n        )\r\n        return this.outerScale\r\n      }\r\n      return scale * this.outerScale\r\n    },\r\n    klass () {\r\n      let classes = {\r\n        'fa-icon': true,\r\n        'fa-spin': this.spin,\r\n        'fa-flip-horizontal': this.flip === 'horizontal',\r\n        'fa-flip-vertical': this.flip === 'vertical',\r\n        'fa-flip-both': this.flip === 'both',\r\n        'fa-inverse': this.inverse,\r\n        'fa-pulse': this.pulse\r\n      }\r\n\r\n      if (this.classes) {\r\n        Object.keys(this.classes).forEach(c => {\r\n          if (this.classes[c]) {\r\n            classes[c] = true\r\n          }\r\n        })\r\n      }\r\n\r\n      return classes\r\n    },\r\n    icon () {\r\n      if (this.name) {\r\n        return icons[this.name]\r\n      }\r\n      return null\r\n    },\r\n    box () {\r\n      if (this.icon) {\r\n        return `0 0 ${this.icon.width} ${this.icon.height}`\r\n      }\r\n      return `0 0 ${this.width} ${this.height}`\r\n    },\r\n    ratio () {\r\n      if (!this.icon) {\r\n        return 1\r\n      }\r\n      let { width, height } = this.icon\r\n      return Math.max(width, height) / 16\r\n    },\r\n    width () {\r\n      return (\r\n        this.childrenWidth ||\r\n        (this.icon && (this.icon.width / this.ratio) * this.normalizedScale) ||\r\n        0\r\n      )\r\n    },\r\n    height () {\r\n      return (\r\n        this.childrenHeight ||\r\n        (this.icon && (this.icon.height / this.ratio) * this.normalizedScale) ||\r\n        0\r\n      )\r\n    },\r\n    style () {\r\n      if (this.normalizedScale === 1) {\r\n        return false\r\n      }\r\n      return {\r\n        fontSize: this.normalizedScale + 'em'\r\n      }\r\n    },\r\n    raw () {\r\n      // generate unique id for each icon's SVG element with ID\r\n      if (!this.icon || !this.icon.raw) {\r\n        return null\r\n      }\r\n      let raw = this.icon.raw\r\n      let ids = {}\r\n      raw = raw.replace(\r\n        /\\s(?:xml:)?id=([\"']?)([^\"')\\s]+)\\1/g,\r\n        (match, quote, id) => {\r\n          let uniqueId = getId('vat-')\r\n          ids[id] = uniqueId\r\n          return ` id=\"${uniqueId}\"`\r\n        }\r\n      )\r\n      raw = raw.replace(\r\n        /#(?:([^'\")\\s]+)|xpointer\\(id\\((['\"]?)([^')]+)\\2\\)\\))/g,\r\n        (match, rawId, _, pointerId) => {\r\n          let id = rawId || pointerId\r\n          if (!id || !ids[id]) {\r\n            return match\r\n          }\r\n\r\n          return `#${ids[id]}`\r\n        }\r\n      )\r\n\r\n      return raw\r\n    },\r\n    focusable () {\r\n      let { tabindex } = this\r\n      if (tabindex == null) {\r\n        return 'false'\r\n      }\r\n      let index =\r\n        typeof tabindex === 'string' ? parseInt(tabindex, 10) : tabindex\r\n      if (index >= 0) {\r\n        return null\r\n      }\r\n      return 'false'\r\n    }\r\n  },\r\n  mounted () {\r\n    this.updateStack()\r\n  },\r\n  updated () {\r\n    this.updateStack()\r\n  },\r\n  methods: {\r\n    updateStack () {\r\n      if (!this.name && this.name !== null && this.$children.length === 0) {\r\n        warn(`Invalid prop: prop \"name\" is required.`, this)\r\n        return\r\n      }\r\n\r\n      if (this.icon) {\r\n        return\r\n      }\r\n\r\n      let width = 0\r\n      let height = 0\r\n      this.$children.forEach(child => {\r\n        child.outerScale = this.normalizedScale\r\n\r\n        width = Math.max(width, child.width)\r\n        height = Math.max(height, child.height)\r\n      })\r\n      this.childrenWidth = width\r\n      this.childrenHeight = height\r\n      this.$children.forEach(child => {\r\n        child.x = (width - child.width) / 2\r\n        child.y = (height - child.height) / 2\r\n      })\r\n    }\r\n  },\r\n  render (h) {\r\n    if (this.name === null) {\r\n      return h()\r\n    }\r\n\r\n    let options = {\r\n      class: this.klass,\r\n      style: this.style,\r\n      attrs: {\r\n        role: this.$attrs.role || (this.label || this.title ? 'img' : null),\r\n        'aria-label': this.label || null,\r\n        'aria-hidden': !(this.label || this.title),\r\n        tabindex: this.tabindex,\r\n        x: this.x,\r\n        y: this.y,\r\n        width: this.width,\r\n        height: this.height,\r\n        viewBox: this.box,\r\n        focusable: this.focusable\r\n      },\r\n      on: this.$listeners\r\n    }\r\n\r\n    let titleId = this.id\r\n    if (this.title) {\r\n      options.attrs['aria-labelledby'] = titleId\r\n    }\r\n\r\n    if (this.raw) {\r\n      let html = `<g>${this.raw}</g>`\r\n\r\n      if (this.title) {\r\n        html = `<title id=\"${titleId}\">${escapeHTML(this.title)}</title>${html}`\r\n      }\r\n\r\n      options.domProps = { innerHTML: html }\r\n    }\r\n\r\n    let content = this.title\r\n      ? [h('title', { attrs: { id: titleId } }, this.title)]\r\n      : []\r\n\r\n    return h(\r\n      'svg',\r\n      options,\r\n      this.raw\r\n        ? null\r\n        : content.concat(\r\n          [\r\n            h(\r\n              'g',\r\n              this.$slots.default || (this.icon ? [\r\n                ...this.icon.paths.map((path, i) =>\r\n                  h('path', {\r\n                    attrs: path,\r\n                    key: `path-${i}`\r\n                  })\r\n                ),\r\n                ...this.icon.polygons.map((polygon, i) =>\r\n                  h('polygon', {\r\n                    attrs: polygon,\r\n                    key: `polygon-${i}`\r\n                  })\r\n                )\r\n              ] : [])\r\n            )]\r\n        )\r\n    )\r\n  },\r\n  register (data) {\r\n    for (let name in data) {\r\n      let icon = data[name]\r\n      let { paths = [], d, polygons = [], points } = icon\r\n\r\n      if (d) {\r\n        paths.push({ d })\r\n      }\r\n\r\n      if (points) {\r\n        polygons.push({ points })\r\n      }\r\n\r\n      icons[name] = assign({}, icon, {\r\n        paths,\r\n        polygons\r\n      })\r\n    }\r\n  },\r\n  icons\r\n}\r\n\r\nfunction assign (obj, ...sources) {\r\n  sources.forEach(source => {\r\n    for (let key in source) {\r\n      if (source.hasOwnProperty(key)) {\r\n        obj[key] = source[key]\r\n      }\r\n    }\r\n  })\r\n\r\n  return obj\r\n}\r\n\r\nfunction getId (prefix = '') {\r\n  return prefix + nanoid(7)\r\n}\r\n\r\nconst ESCAPE_MAP = {\r\n  '<': '&lt;',\r\n  '>': '&gt;',\r\n  '\"': '&quot;',\r\n  '&': '&amp;'\r\n}\r\n\r\nfunction escapeHTML (html) {\r\n  return html.replace(/[<>\"&]/g, c => ESCAPE_MAP[c] || c)\r\n}\r\n</script>\r\n\r\n<style>\r\n.fa-icon {\r\n  display: inline-block;\r\n  fill: currentColor;\r\n  overflow: visible;\r\n}\r\n\r\n.fa-icon > g {\r\n  transform-origin: 50% 50%;\r\n}\r\n\r\n.fa-flip-horizontal {\r\n  transform: scale(-1, 1);\r\n}\r\n\r\n.fa-flip-vertical {\r\n  transform: scale(1, -1);\r\n}\r\n\r\n.fa-flip-both {\r\n  transform: scale(-1, -1);\r\n}\r\n\r\n.fa-spin > g {\r\n  animation: fa-spin 1s 0s infinite linear;\r\n}\r\n\r\n.fa-pulse > g {\r\n  animation: fa-spin 1s infinite steps(8);\r\n}\r\n\r\n.fa-inverse {\r\n  color: #fff;\r\n}\r\n\r\n@keyframes fa-spin {\r\n  0% {\r\n    transform: rotate(0deg);\r\n  }\r\n  100% {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n</style>\r\n"]}]}